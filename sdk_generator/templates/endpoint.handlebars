# coding: utf-8

{{>partial_header}}

from dataclasses import dataclass
import urllib3
{{#with operation}}
{{#or headerParams bodyParam produces}}
from urllib3._collections import HTTPHeaderDict
{{/or}}
{{/with}}

from {{packageName}} import api_client, exceptions
{{> model_templates/imports_schema_types }}
{{> model_templates/imports_schemas }}

{{#unless isStub}}
from . import path

{{/unless}}
{{#with operation}}
{{#if queryParams}}
{{> endpoint_parameter_schema_and_def xParams=queryParams xParamsName="Query" }}
{{/if}}
{{#if headerParams}}
{{> endpoint_parameter_schema_and_def xParams=headerParams xParamsName="Header" }}
{{/if}}
{{#if pathParams}}
{{> endpoint_parameter_schema_and_def xParams=pathParams xParamsName="Path" }}
{{/if}}
{{#if cookieParams}}
{{> endpoint_parameter_schema_and_def xParams=cookieParams xParamsName="Cookie" }}
{{/if}}
{{#with bodyParam}}
# body param
{{#each content}}
{{#with this.schema}}
{{> model_templates/schema }}
{{/with}}
{{/each}}


request_body_{{paramName}} = api_client.RequestBody(
    content={
{{#each content}}
        '{{{@key}}}': api_client.MediaType({{#if this.schema}}
            schema={{this.schema.baseName}}{{/if}}),
{{/each}}
    },
{{#if required}}
    required=True,
{{/if}}
)
{{/with}}
{{#unless isStub}}
{{#each authMethods}}
{{#if @first}}
_auth = [
{{/if}}
    '{{name}}',
{{#if @last}}
]
{{/if}}
{{/each}}
{{#each servers}}
{{#if @first}}
_servers = (
{{/if}}
    {
        'url': "{{{url}}}",
        'description': "{{#unless description}}No description provided{{else}}{{{description}}}{{/unless}}",
        {{#each variables}}
        {{#if @first}}
        'variables': {
        {{/if}}
            '{{{name}}}': {
                'description': "{{#unless description}}No description provided{{else}}{{{description}}}{{/unless}}",
                'default_value': "{{{defaultValue}}}",
                {{#each enumValues}}
                {{#if @first}}
                'enum_values': [
                {{/if}}
                    "{{{.}}}"{{#unless @last}},{{/unless}}
                {{#if @last}}
                ]
                {{/if}}
                {{/each}}
                }{{#unless @last}},{{/unless}}
        {{#if @last}}
            }
        {{/if}}
        {{/each}}
    },
{{#if @last}}
)
{{/if}}
{{/each}}
{{/unless}}
{{#each responses}}
{{#each responseHeaders}}
{{#with schema}}
{{> model_templates/schema }}
{{/with}}
{{#unless isStub}}
{{paramName}}_parameter = api_client.HeaderParameter(
    name="{{baseName}}",
{{#if style}}
    style=api_client.ParameterStyle.{{style}},
{{/if}}
{{#if schema}}
{{#with schema}}
    schema={{baseName}},
{{/with}}
{{/if}}
{{#if required}}
    required=True,
{{/if}}
{{#if isExplode}}
    explode=True,
{{/if}}
)
{{/unless}}
{{/each}}
{{#each content}}
{{#with this.schema}}
{{> model_templates/schema }}
{{/with}}
{{/each}}
{{#if responseHeaders}}
ResponseHeadersFor{{code}} = typing_extensions.TypedDict(
    'ResponseHeadersFor{{code}}',
    {
{{#each responseHeaders}}
        '{{baseName}}': {{#with schema}}{{baseName}},{{/with}}
{{/each}}
    }
)
{{/if}}


@dataclass
{{#if isDefault}}
class ApiResponseForDefault(api_client.ApiResponse):
{{else}}
class ApiResponseFor{{code}}(api_client.ApiResponse):
{{/if}}
    response: urllib3.HTTPResponse
{{#and responseHeaders content}}
    body: typing.Union[
{{#each content}}
{{#if this.schema}}
        {{this.schema.baseName}},
{{else}}
        schemas.Unset,
{{/if}}
{{/each}}
    ]
    headers: ResponseHeadersFor{{code}}
{{else}}
{{#or responseHeaders content}}
{{#if responseHeaders}}
    headers: ResponseHeadersFor{{code}}
    body: schemas.Unset = schemas.unset
{{else}}
{{#if content.isArray}}
    # GTO-E-1-1
{{#gt content.length 1}}
    # GTO-E-2-1
    body: typing.Union[
{{#each content}}
{{#if this.schema}}
        {{this.schema.baseName}},
{{else}}
        schemas.Unset,
{{/if}}
{{/each}}
    ]
{{else}}
    # GTO-E-2-2
    body: {{#with (lookup content 0)}}{{#if this.schema}}{{this.schema.baseName}}{{else}}schemas.Unset{{/if}}{{/with}}
{{/gt}}
{{else}}
    # GTO-E-1-2
    body: {{#each content}}{{#if this.schema}}{{this.schema.baseName}}{{else}}schemas.Unset{{/if}}{{/each}}
{{/if}}
    headers: schemas.Unset = schemas.unset
{{/if}}
{{/or}}
{{/and}}
{{#unless responseHeaders}}
{{#unless content}}
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset
{{/unless}}
{{/unless}}


{{#if isDefault}}
_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
{{else}}
_response_for_{{code}} = api_client.OpenApiResponse(
    response_cls=ApiResponseFor{{code}},
{{/if}}
{{#each content}}
{{#if @first}}
    content={
{{/if}}
        '{{{@key}}}': api_client.MediaType({{#if this.schema}}
            schema={{this.schema.baseName}}{{/if}}),
{{#if @last}}
    },
{{/if}}
{{/each}}
{{#if responseHeaders}}
    headers=[
{{#each responseHeaders}}
        {{paramName}}_parameter,
{{/each}}
    ]
{{/if}}
)
{{/each}}
{{#unless isStub}}
_status_code_to_response = {
{{#each responses}}
{{#if isDefault}}
    'default': _response_for_default,
{{else}}
    '{{code}}': _response_for_{{code}},
{{/if}}
{{/each}}
}
{{/unless}}
{{#each produces}}
{{#if @first}}
_all_accept_content_types = (
{{/if}}
    '{{{this.mediaType}}}',
{{#if @last}}
)
{{/if}}
{{/each}}

from unitsnet_py import Duration
import time
import json
from chkp_harmony_endpoint_management_sdk.core.job_manager import await_for_job
from chkp_harmony_endpoint_management_sdk.core.logger import logger, error_logger, network_logger
from chkp_harmony_endpoint_management_sdk.classes.harmony_api_exception import HarmonyApiException, HarmonyErrorScope

class HarmonyResponse:
    def __init__(self):
        self.payload: {{#if returnBaseType}}{{returnBaseType}}{{else}}None{{/if}} = None
        self.http_response = None
        self.is_job = None
        self.duration: Duration = None
        self.request_id = None
        self.job_id = None


class BaseApi(api_client.Api):
{{#if bodyParam}}
    {{#each contentTypeToOperation}}
    {{> endpoint_args_baseapi_wrapper contentType=@key this=this}}

    {{/each}}
    {{> endpoint_args_baseapi_wrapper contentType="null" this=this}}

{{else}}
    @typing.overload
    def _{{operationId}}_oapg(
    {{> endpoint_args isOverload=true skipDeserialization="False" contentType="null"}}
{{/if}}

    @typing.overload
    def _{{operationId}}_oapg(
    {{> endpoint_args isOverload=true skipDeserialization="True" contentType="null"}}

    @typing.overload
    def _{{operationId}}_oapg(
    {{> endpoint_args isOverload=true skipDeserialization="null" contentType="null"}}

    def _{{operationId}}_oapg(
    {{> endpoint_args isOverload=false skipDeserialization="null" contentType="null"}}
        """
    {{#if summary}}
        {{summary}}
    {{/if}}
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
    {{#if queryParams}}
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
    {{/if}}
    {{#if headerParams}}
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
    {{/if}}
    {{#if pathParams}}
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
    {{/if}}
    {{#if cookieParams}}
        self._verify_typed_dict_inputs_oapg(RequestCookieParams, cookie_params)
    {{/if}}
        used_path = path.value
    {{#if pathParams}}

        _path_params = {}
        for parameter in (
    {{#each pathParams}}
            request_path_{{paramName}},
    {{/each}}
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    {{/if}}
        prefix_separator_iterator = None
    {{#if queryParams}}
        for parameter in (
    {{#each queryParams}}
            request_query_{{paramName}},
    {{/each}}
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    {{/if}}

        session_id = self.api_client.configuration.api_key['session']['session_id']
        request_id = self.api_client.configuration.api_key['session']['request_id']

        parameter = api_client.QueryParameter(
                name="operationName",
                style=api_client.ParameterStyle.FORM,
                schema=str)
        
        if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
        
        serialized_data = parameter.serialize('{{operationId}}', prefix_separator_iterator)
        for serialized_value in serialized_data.values():
            used_path += serialized_value

        parameter = api_client.QueryParameter(
                name="requestId",
                style=api_client.ParameterStyle.FORM,
                schema=str)
        
        prefix_separator_iterator = parameter.get_prefix_separator_iterator()
        
        serialized_data = parameter.serialize(request_id, prefix_separator_iterator)
        for serialized_value in serialized_data.values():
            used_path += serialized_value
    {{#or headerParams bodyParam produces}}

        _headers = HTTPHeaderDict()
    {{else}}
    {{/or}}
    {{#if headerParams}}
        for parameter in (
    {{#each headerParams}}
            request_header_{{paramName}},
    {{/each}}
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
    {{/if}}
        # TODO add cookie handling
    {{#if produces}}
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
    {{/if}}
    {{#with bodyParam}}

    {{#if required}}
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
    {{/if}}
        _fields = None
        _body = None
    {{#if required}}
        {{> endpoint_body_serialization }}
    {{else}}
        if body is not schemas.unset:
            {{> endpoint_body_serialization }}
    {{/if}}
    {{/with}}
    {{#if servers}}

        host = self._get_host_oapg('{{operationId}}', _servers, host_index)
    {{/if}}

        _headers.add("x-mgmt-session-id", session_id)
        _headers.add("x-mgmt-request-id", request_id)
        _headers.add("x-mgmt-data-request-source", 'harmony-endpoint-py-sdk')

        endpoint_token = self.api_client.configuration.api_key['session']['endpoint_token']
        if endpoint_token:
            _headers.add("x-mgmt-api-token", endpoint_token)

        infinity_portal_token = self.api_client.configuration.api_key['session']['infinity_portal_token']
        if infinity_portal_token:
            _headers.add("Authorization", f'Bearer {infinity_portal_token}')

        final_url = self.api_client.configuration.host + used_path

        logger(f'Sending operation "{{operationId}}" url "{final_url}" ...')

        request_options = {
            "method": '{{httpMethod}}'.upper(),
            "headers": dict(_headers),
            {{#if bodyParam}}
            "body": json.loads(_body.decode('utf-8')),
            {{/if}}
        }
        network_logger(f'Sending "{final_url}" with options: "{request_options}"')
        start_time = time.time()  
        try:

            response = self.api_client.call_api(
                resource_path=used_path,
                method='{{httpMethod}}'.upper(),
        {{#or headerParams bodyParam produces}}
                headers=_headers,
        {{/or}}
        {{#if bodyParam}}
                fields=_fields,
                body=_body,
        {{/if}}
        {{#if hasAuthMethods}}
                auth_settings=_auth,
        {{/if}}
        {{#if servers}}
                host=host,
        {{/if}}
                stream=stream,
                timeout=timeout,
            )
        except Exception as e:
            error_logger(f'Receiving operation "{{operationId}}" communication error for url "{final_url}" with status, reason "{e.reason}"')
            network_logger(f'Receiving "{final_url}" with reason "{e.reason}"')
            raise e
        {{!-- api_response = api_client.ApiResponseWithoutDeserialization(response=response) --}}
        {{!-- if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                {{#if hasDefaultResponse}}
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)
                {{else}}
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)
                {{/if}} --}}

    
        response_payload = response.data.decode('utf-8') if response.data else ''

        response_options = {
            "status": response.status,
            "headers": dict(response.headers),
            "payload": response_payload,
        }

        logger(f'Receiving operation "{{operationId}}" url "{final_url}" with status code "{response.status}"')
        network_logger(f'Receiving "{final_url}" with options: "{response_options}"')
    
        if not 200 <= response.status <= 299:
            error_logger(f'Receiving error operation "{{operationId}}" url "{final_url}" with "{response_options}"')
            raise HarmonyApiException(
                error_scope=HarmonyErrorScope.SERVICE,
                request_id=request_id,
                payload_error=response_payload,
                url=final_url,
                status_code=response.status,
            )

        harmony_response = HarmonyResponse()

        json_payload = {{#if returnBaseType}}True{{else}}False{{/if}}

        harmony_response.http_response = response
        harmony_response.is_job = _headers.get('x-mgmt-run-as-job') == 'on'
        harmony_response.request_id = request_id

        if json_payload or harmony_response.is_job:
            harmony_response.payload = response.json()

        if (harmony_response.is_job):
            harmony_response.job_id = harmony_response.payload['jobId']
        
        if (harmony_response.is_job and not self.api_client.configuration.api_key['session']['do_not_handle_job']):
            job_status_operation = self.api_client.configuration.api_key['session']['job_status_operation']
            harmony_response.payload = await_for_job(job_id=harmony_response.job_id, job_status_operation=job_status_operation, request_id=request_id)

        end_time = time.time()
        harmony_response.duration = Duration.from_seconds(end_time - start_time)
        return harmony_response



class {{operationIdCamelCase}}(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

{{#if bodyParam}}
    {{!-- {{#each contentTypeToOperation}}
    {{> endpoint_args_operationid_wrapper contentType=@key this=this}}

    {{/each}}
    {{> endpoint_args_operationid_wrapper contentType="null" this=this}} --}}

{{else}}
    {{!-- @typing.overload
    def {{operationId}}(
    {{> endpoint_args isOverload=true skipDeserialization="False" contentType="null"}} --}}
{{/if}}

    {{!-- @typing.overload
    def {{operationId}}(
    {{> endpoint_args isOverload=true skipDeserialization="True" contentType="null"}}

    @typing.overload
    def {{operationId}}(
    {{> endpoint_args isOverload=true skipDeserialization="null" contentType="null"}} --}}

    def {{operationId}}(
    {{> endpoint_args isOverload=false skipDeserialization="null" contentType="null" facade=true}}
        skip_deserialization = True
        content_type: str = 'application/json'
        accept_content_types: str = ('application/json',)
        self.api_client.configuration.api_key['session']['do_not_handle_job'] = do_not_handle_job
        return self._{{operationId}}_oapg(
            {{> endpoint_args_passed }}
        )


class ApiFor{{httpMethod}}(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

{{#if bodyParam}}
    {{#each contentTypeToOperation}}
    {{> endpoint_args_httpmethod_wrapper contentType=@key this=this}}

    {{/each}}
    {{> endpoint_args_httpmethod_wrapper contentType="null" this=this}}

{{else}}
    @typing.overload
    def {{httpMethod}}(
    {{> endpoint_args isOverload=true skipDeserialization="False" contentType="null"}}
{{/if}}

    @typing.overload
    def {{httpMethod}}(
    {{> endpoint_args isOverload=true skipDeserialization="True" contentType="null"}}

    @typing.overload
    def {{httpMethod}}(
    {{> endpoint_args isOverload=true skipDeserialization="null" contentType="null"}}

    def {{httpMethod}}(
    {{> endpoint_args isOverload=false skipDeserialization="null" contentType="null"}}
        return self._{{operationId}}_oapg(
            {{> endpoint_args_passed }}
        )


{{/with}}
